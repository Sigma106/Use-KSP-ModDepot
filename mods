self.button1 = tk.Button(frame, text="FreeIvas", command=self.start_download)
self.button1.grid(row=0, column=0, pady=10, padx=20)

    def start_download(self):
        url = self.url_entry.get()
        if url:
            # Створення нового вікна для прогресу завантаження
            self.progress_window = tk.Toplevel(self.root)
            self.progress_window.title("Завантаження в процесі")
            self.progress_window.geometry("400x200")

            # Прогрес-бар в новому вікні
            self.progress_bar = ttk.Progressbar(self.progress_window, length=300, mode='determinate', maximum=100)
            self.progress_bar.pack(pady=20)

            # Мітка для швидкості та завантаженого файлу в новому вікні
            self.status_label = tk.Label(self.progress_window, text="Швидкість: 0 KB/c | Завантажено: 0 MB")
            self.status_label.pack(pady=10)

            # Мітка для показу прогресу "Завантажено: X MB з Y MB"
            self.progress_label = tk.Label(self.progress_window, text="Завантажено: 0 MB з 0 MB")
            self.progress_label.pack(pady=5)

            # Запуск завантаження в окремому потоці
            download_thread = threading.Thread(target=self.download_file, args=(url,))
            download_thread.daemon = True  # Дозволяє завершити потік при закритті програми
            download_thread.start()
        else:
            self.status_label.config(text="Будь ласка, введіть URL.")

    def download_file(self, url):
        try:
            # Надсилаємо GET-запит для отримання файлу
            response = requests.get(url, stream=True)
            total_size = int(response.headers.get('content-length', 0))
            filename = url.split("/")[-1]

            start_time = time.time()
            bytes_downloaded = 0
            speed = 0
            total_size_mb = total_size / (1024 * 1024)  # Перетворення загального розміру у MB

            # Завантажуємо файл
            with open(filename, "wb") as file:
                for data in response.iter_content(chunk_size=1024):
                    if data:
                        file.write(data)
                        bytes_downloaded += len(data)

                        # Оновлюємо прогрес-бар
                        progress = (bytes_downloaded / total_size) * 100
                        self.progress_bar['value'] = progress
                        self.progress_window.update_idletasks()

                        # Рахуємо швидкість завантаження
                        elapsed_time = time.time() - start_time
                        if elapsed_time > 0:
                            speed = bytes_downloaded / elapsed_time / 1024  # Швидкість у KB/c

                        # Оновлюємо мітку статусу
                        downloaded_mb = bytes_downloaded / (1024 * 1024)
                        self.status_label.config(
                            text=f"Швидкість: {speed:.2f} KB/c | Завантажено: {downloaded_mb:.2f} MB")

                        # Оновлюємо мітку прогресу з "Завантажено: X MB з Y MB"
                        self.progress_label.config(
                            text=f"Завантажено: {downloaded_mb:.2f} MB з {total_size_mb:.2f} MB")

            # Переміщуємо файл до папки Downloads
            self.move_to_downloads(filename)

            self.status_label.config(text="Завантаження завершено!")
        except requests.exceptions.RequestException as e:
            self.status_label.config(text=f"Помилка: {e}")

    def move_to_downloads(self, filename):
        # Створюємо папку Downloads, якщо вона не існує
        download_folder = os.path.join(os.getcwd(), 'Downloads')
        if not os.path.exists(download_folder):
            os.makedirs(download_folder)

        # Отримуємо повний шлях до завантаженого файлу
        source_path = os.path.join(os.getcwd(), filename)

        # Перевіряємо, чи є завантажений файл ZIP-архівом
        if filename.endswith('.zip'):
            self.unzip_file(source_path, download_folder)

        # Якщо файл не ZIP, просто переміщаємо його в папку Downloads
        else:
            destination_path = os.path.join(download_folder, filename)
            shutil.move(source_path, destination_path)
            print(f"Файл переміщено в {destination_path}")

    def unzip_file(self, zip_path, extract_to_folder):
        try:
            # Створюємо папку з ім'ям файлу (без розширення) для розпакованих файлів
            folder_name = os.path.splitext(os.path.basename(zip_path))[0]
            folder_path = os.path.join(extract_to_folder, folder_name)

            # Створюємо папку, якщо вона не існує
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)

            # Розпаковуємо ZIP-файл у створену папку
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(folder_path)
                print(f"Розпаковано в {folder_path}")

            # Видаляємо ZIP-файл після розпакування
            os.remove(zip_path)
            print(f"ZIP-файл видалено: {zip_path}")

        except zipfile.BadZipFile:
            print(f"Помилка: {zip_path} не є дійсним ZIP-файлом.")
            self.status_label.config(text="Помилка: Невірний ZIP-файл.")
        except Exception as e:
            print(f"Помилка при розпакуванні ZIP-файлу: {e}")
            self.status_label.config(text=f"Помилка при розпакуванні ZIP-файлу: {e}")
